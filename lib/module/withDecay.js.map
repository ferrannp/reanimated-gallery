{"version":3,"sources":["withDecay.ts"],"names":["withDecay","userConfig","callback","config","deceleration","velocity","clamp","VELOCITY_EPS","decay","animation","now","lastTimestamp","initialVelocity","current","deltaTime","Math","min","kv","pow","kx","v0","v","x","toValueIsReached","Array","isArray","abs","start","value","animationObj"],"mappings":"AAaA,eAAe,SAASA,SAAT,CACbC,UADa,EAEbC,QAFa,EAGL;AACR,YADQ,CAGR;AACA;AACA;AACA;;AAEA,QAAMC,MAAmB,GAAG;AAC1BC,IAAAA,YAAY,EAAE,KADY;AAE1BC,IAAAA,QAAQ,EAAEJ,UAAU,CAACI;AAFK,GAA5B;;AAKA,MAAIJ,UAAU,CAACK,KAAf,EAAsB;AACpBH,IAAAA,MAAM,CAACG,KAAP,GAAeL,UAAU,CAACK,KAA1B;AACD;;AAED,QAAMC,YAAY,GAAG,CAArB;;AAEA,WAASC,KAAT,CAAeC,SAAf,EAAsCC,GAAtC,EAAmD;AACjD,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA,eAFI;AAGJC,MAAAA,OAHI;AAIJR,MAAAA;AAJI,QAKFI,SALJ;AAOA,UAAMK,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASN,GAAG,GAAGC,aAAf,EAA8B,EAA9B,CAAlB;AACAF,IAAAA,SAAS,CAACE,aAAV,GAA0BD,GAA1B;AAEA,UAAMO,EAAE,GAAGF,IAAI,CAACG,GAAL,CAASf,MAAM,CAACC,YAAhB,EAA+BU,SAA/B,CAAX;AACA,UAAMK,EAAE,GACLhB,MAAM,CAACC,YAAP,IAAwB,IAAIa,EAA5B,CAAD,IAAqC,IAAId,MAAM,CAACC,YAAhD,CADF;AAGA,UAAMgB,EAAE,GAAGf,QAAQ,GAAG,IAAtB;AACA,UAAMgB,CAAC,GAAGD,EAAE,GAAGH,EAAL,GAAU,IAApB;AACA,UAAMK,CAAC,GAAGT,OAAO,GAAGO,EAAE,GAAGD,EAAzB;AAEAV,IAAAA,SAAS,CAACI,OAAV,GAAoBS,CAApB;AACAb,IAAAA,SAAS,CAACJ,QAAV,GAAqBgB,CAArB;AAEA,QAAIE,gBAAgB,GAAG,IAAvB;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAActB,MAAM,CAACG,KAArB,CAAJ,EAAiC;AAC/B,UACEM,eAAe,GAAG,CAAlB,IACAH,SAAS,CAACI,OAAV,IAAqBV,MAAM,CAACG,KAAP,CAAa,CAAb,CAFvB,EAGE;AACAiB,QAAAA,gBAAgB,GAAGpB,MAAM,CAACG,KAAP,CAAa,CAAb,CAAnB;AACD,OALD,MAKO,IACLM,eAAe,GAAG,CAAlB,IACAH,SAAS,CAACI,OAAV,IAAqBV,MAAM,CAACG,KAAP,CAAa,CAAb,CAFhB,EAGL;AACAiB,QAAAA,gBAAgB,GAAGpB,MAAM,CAACG,KAAP,CAAa,CAAb,CAAnB;AACD;AACF;;AAED,QAAIS,IAAI,CAACW,GAAL,CAASL,CAAT,IAAcd,YAAd,IAA8BgB,gBAAgB,KAAK,IAAvD,EAA6D;AAC3D,UAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC7Bd,QAAAA,SAAS,CAACI,OAAV,GAAoBU,gBAApB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED,WAASI,KAAT,CAAelB,SAAf,EAAsCmB,KAAtC,EAAqDlB,GAArD,EAAkE;AAChED,IAAAA,SAAS,CAACI,OAAV,GAAoBe,KAApB;AACAnB,IAAAA,SAAS,CAACE,aAAV,GAA0BD,GAA1B;AACAD,IAAAA,SAAS,CAACG,eAAV,GAA4BT,MAAM,CAACE,QAAnC;AACD;;AAED,QAAMwB,YAAqB,GAAG;AAC5BpB,IAAAA,SAAS,EAAED,KADiB;AAE5BmB,IAAAA,KAF4B;AAG5BtB,IAAAA,QAAQ,EAAEF,MAAM,CAACE,QAAP,IAAmB,CAHD;AAI5BH,IAAAA;AAJ4B,GAA9B;AAOA,SAAO2B,YAAP;AACD","sourcesContent":["type IUserConfig = {\n  deceleration?: number;\n  velocity: number;\n  clamp?: [number, number];\n};\n\ntype IAnimation = {\n  current: number;\n  lastTimestamp: number;\n  initialVelocity: number;\n  velocity: number;\n};\n\nexport default function withDecay(\n  userConfig: IUserConfig,\n  callback?: () => void,\n): number {\n  'worklet';\n\n  // TODO: not sure what should I return here\n  // if (!_WORKLET) {\n  //   return toValue;\n  // }\n\n  const config: IUserConfig = {\n    deceleration: 0.998,\n    velocity: userConfig.velocity,\n  };\n\n  if (userConfig.clamp) {\n    config.clamp = userConfig.clamp;\n  }\n\n  const VELOCITY_EPS = 5;\n\n  function decay(animation: IAnimation, now: number) {\n    const {\n      lastTimestamp,\n      initialVelocity,\n      current,\n      velocity,\n    } = animation;\n\n    const deltaTime = Math.min(now - lastTimestamp, 64);\n    animation.lastTimestamp = now;\n\n    const kv = Math.pow(config.deceleration!, deltaTime);\n    const kx =\n      (config.deceleration! * (1 - kv)) / (1 - config.deceleration!);\n\n    const v0 = velocity / 1000;\n    const v = v0 * kv * 1000;\n    const x = current + v0 * kx;\n\n    animation.current = x;\n    animation.velocity = v;\n\n    let toValueIsReached = null;\n\n    if (Array.isArray(config.clamp)) {\n      if (\n        initialVelocity < 0 &&\n        animation.current <= config.clamp[0]\n      ) {\n        toValueIsReached = config.clamp[0];\n      } else if (\n        initialVelocity > 0 &&\n        animation.current >= config.clamp[1]\n      ) {\n        toValueIsReached = config.clamp[1];\n      }\n    }\n\n    if (Math.abs(v) < VELOCITY_EPS || toValueIsReached !== null) {\n      if (toValueIsReached !== null) {\n        animation.current = toValueIsReached;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  function start(animation: IAnimation, value: number, now: number) {\n    animation.current = value;\n    animation.lastTimestamp = now;\n    animation.initialVelocity = config.velocity;\n  }\n\n  const animationObj: unknown = {\n    animation: decay,\n    start,\n    velocity: config.velocity || 0,\n    callback,\n  };\n\n  return animationObj as number;\n}\n"]}