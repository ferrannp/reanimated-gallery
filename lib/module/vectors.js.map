{"version":3,"sources":["vectors.ts"],"names":["useSharedValue","_isVector","value","x","y","isSharedValue","_get","_reduce","operation","prop","vectors","first","rest","slice","initial","res","reduce","acc","current","r","useSharedVector","create","add","sub","divide","multiply","invert","vector","set","min","getMin","Math","apply","map","item","max","getMax","clamp","lowerBound","upperBound","eq"],"mappings":"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","sourcesContent":["import Animated, { useSharedValue } from 'react-native-reanimated';\n\ntype SharedValueType = number;\n\nexport type Vector<T extends SharedValueType> = {\n  x: T;\n  y: T;\n};\nexport type SharedVector<T extends SharedValueType> = {\n  x: Animated.SharedValue<T>;\n  y: Animated.SharedValue<T>;\n};\n\ntype VectorType = Vector<any> | SharedVector<any>;\n\ntype VectorList = (VectorType | SharedValueType)[];\n\nconst _isVector = (value: any): value is Vector<any> => {\n  'worklet';\n\n  return typeof value.x !== 'undefined' && value.y !== 'undefined';\n};\n\nconst isSharedValue = (value: any): value is Animated.SharedValue<any> => {\n  'worklet';\n\n  return typeof value.value !== 'undefined';\n};\n\nconst _get = <\n  T extends Animated.SharedValue<SharedValueType> | SharedValueType\n>(\n  value: T,\n) => {\n  'worklet';\n\n  if (isSharedValue(value)) {\n    return value.value;\n  }\n\n  return value;\n};\n\ntype Operation = 'divide' | 'add' | 'sub' | 'multiply';\n\ntype VectorProp = 'x' | 'y';\n\nconst _reduce = (\n  operation: Operation,\n  prop: VectorProp,\n  vectors: VectorList,\n) => {\n  'worklet';\n\n  const first = vectors[0];\n  const rest = vectors.slice(1);\n\n  const initial = _get(_isVector(first) ? first[prop] : first);\n\n  const res = rest.reduce((acc, current) => {\n    const value = _get(_isVector(current) ? current[prop] : current);\n    const r = (() => {\n      switch (operation) {\n        case 'divide':\n          if (value === 0) {\n            return 0;\n          }\n          return acc / value;\n        case 'add':\n          return acc + value;\n        case 'sub':\n          return acc - value;\n        case 'multiply':\n          return acc * value;\n        default:\n          return acc;\n      }\n    })();\n\n    return r;\n  }, initial);\n\n  return res;\n};\n\nexport const useSharedVector = <T>(x: T, y = x) => {\n  return {\n    x: useSharedValue(x),\n    y: useSharedValue(y),\n  };\n};\n\nexport const create = <T extends SharedValueType>(x: T, y: T) => {\n  'worklet';\n\n  return {\n    x,\n    y,\n  };\n};\n\nexport const add = (vectors: VectorList) => {\n  'worklet';\n\n  return {\n    x: _reduce('add', 'x', vectors),\n    y: _reduce('add', 'y', vectors),\n  };\n};\n\nexport const sub = (vectors: VectorList) => {\n  'worklet';\n\n  return {\n    x: _reduce('sub', 'x', vectors),\n    y: _reduce('sub', 'y', vectors),\n  };\n};\n\nexport const divide = (vectors: VectorList) => {\n  'worklet';\n\n  return {\n    x: _reduce('divide', 'x', vectors),\n    y: _reduce('divide', 'y', vectors),\n  };\n};\n\nexport const multiply = (vectors: VectorList) => {\n  'worklet';\n\n  return {\n    x: _reduce('multiply', 'x', vectors),\n    y: _reduce('multiply', 'y', vectors),\n  };\n};\n\nexport const invert = <T extends Vector<any>>(vector: T) => {\n  'worklet';\n\n  return {\n    x: _get(vector.x) * -1,\n    y: _get(vector.y) * -1,\n  };\n};\n\nexport const set = <T extends VectorType>(\n  vector: T,\n  value: VectorType | SharedValueType,\n) => {\n  'worklet';\n\n  const x = _get(_isVector(value) ? value.x : value);\n  const y = _get(_isVector(value) ? value.y : value);\n\n  if (typeof vector.x.value !== 'undefined') {\n    vector.x.value = x;\n    vector.y.value = y;\n  } else {\n    vector.x = x;\n    vector.y = y;\n  }\n};\n\nexport const min = (vectors: VectorList) => {\n  'worklet';\n\n  const getMin = (prop: VectorProp) => {\n    return Math.min.apply(\n      void 0,\n      vectors.map((item) =>\n        _get(_isVector(item) ? item[prop] : item),\n      ),\n    );\n  };\n\n  return {\n    x: getMin('x'),\n    y: getMin('y'),\n  };\n};\n\nexport const max = (vectors: VectorList) => {\n  'worklet';\n\n  const getMax = (prop: VectorProp) =>\n    Math.max.apply(\n      void 0,\n      vectors.map((item) =>\n        _get(_isVector(item) ? item[prop] : item),\n      ),\n    );\n\n  return {\n    x: getMax('x'),\n    y: getMax('y'),\n  };\n};\n\nexport const clamp = <T extends Vector<any>>(\n  value: T,\n  lowerBound: VectorType | SharedValueType,\n  upperBound: VectorType | SharedValueType,\n) => {\n  'worklet';\n\n  return min([max([lowerBound, value]), upperBound]);\n};\n\nexport const eq = <T extends Vector<any>>(\n  vector: T,\n  value: VectorType | SharedValueType,\n) => {\n  'worklet';\n\n  const x = _get(_isVector(value) ? value.x : value);\n  const y = _get(_isVector(value) ? value.y : value);\n\n  return _get(vector.x) === x && _get(vector.y) === y;\n};\n"]}