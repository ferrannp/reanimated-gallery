{"version":3,"sources":["useInit.ts"],"names":["runOnUI","withTiming","withSpring","Easing","interpolate","useRef","withDecay","useAnimatedGestureHandler","vec","useSharedVector","usedVectors","useRunOnce","cb","ref","current","usedWorklets","bezier","useInit","x","Object","keys","forEach","key"],"mappings":";;;;;;;;;;AAAA,SACEA,OADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,MAJF,EAKEC,WALF,QAMO,yBANP;AAOA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,OAAO,KAAKC,GAAZ,MAAqB,WAArB,C,CAGA;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAsCD,GAA5C;AAAA,MAA4BE,WAA5B,4BAA4CF,GAA5C;;AAEA,SAASG,UAAT,CAAoBC,EAApB,EAAoC;AAClC,QAAMC,GAAG,GAAGR,MAAM,CAAiB,IAAjB,CAAlB;;AAEA,MAAIQ,GAAG,CAACC,OAAJ,KAAgB,IAApB,EAA0B;AACxBF,IAAAA,EAAE;AACFC,IAAAA,GAAG,CAACC,OAAJ,GAAc,IAAd;AACD;AACF;;AAED,MAAMC,YAAY;AAChBd,EAAAA,UADgB;AAEhBC,EAAAA,UAFgB;AAGhBc,EAAAA,MAAM,EAAEb,MAAM,CAACa,MAHC;AAIhBZ,EAAAA,WAJgB;AAKhBE,EAAAA,SALgB;AAMhBC,EAAAA;AANgB,GAObG,WAPa,CAAlB;;AAUA,OAAO,SAASO,OAAT,GAAmB;AACxBN,EAAAA,UAAU,CACRX,OAAO,CAAC,MAAM;AACZ;;AAEA,UAAMkB,CAAyB,GAAG,EAAlC;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYL,YAAZ,EAA0BM,OAA1B,CAAmCC,GAAD,IAAS;AACzCJ,MAAAA,CAAC,CAACI,GAAD,CAAD,GAASP,YAAY,CAACO,GAAD,CAArB;AACD,KAFD;AAGD,GAPM,CADC,CAAV;AAUD","sourcesContent":["import {\n  runOnUI,\n  withTiming,\n  withSpring,\n  Easing,\n  interpolate,\n} from 'react-native-reanimated';\nimport { useRef } from 'react';\nimport withDecay from './withDecay';\nimport { useAnimatedGestureHandler } from './useAnimatedGestureHandler';\nimport * as vec from './vectors';\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst { useSharedVector, ...usedVectors } = vec;\n\nfunction useRunOnce(cb: () => void) {\n  const ref = useRef<boolean | null>(null);\n\n  if (ref.current === null) {\n    cb();\n    ref.current = true;\n  }\n}\n\nconst usedWorklets = {\n  withTiming,\n  withSpring,\n  bezier: Easing.bezier,\n  interpolate,\n  withDecay,\n  useAnimatedGestureHandler,\n  ...usedVectors,\n} as { [key: string]: any };\n\nexport function useInit() {\n  useRunOnce(\n    runOnUI(() => {\n      'worklet';\n\n      const x: { [key: string]: any } = {};\n      Object.keys(usedWorklets).forEach((key) => {\n        x[key] = usedWorklets[key];\n      });\n    }),\n  );\n}\n"]}