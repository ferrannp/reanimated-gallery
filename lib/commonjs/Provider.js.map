{"version":3,"sources":["Provider.tsx"],"names":["GalleryOverlayContext","React","createContext","GalleryContext","useGalleryItem","index","item","gallery","ref","opacity","addImage","onPress","onShow","GalleryProvider","totalCount","children","setActiveGallery","GalleryState","GalleryOverlay","activeGallery","StyleSheet","absoluteFill"],"mappings":";;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;AAKA;;;;;;AAEA,MAAMA,qBAAqB,gBAAGC,eAAMC,aAAN,CAC5B,IAD4B,CAA9B;;AAGA,MAAMC,cAAc,gBAAGF,eAAMC,aAAN,CAAyC,IAAzC,CAAvB;;AAOO,SAASE,cAAT,CAAwB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAxB,EAA0D;AAC/D,QAAMC,OAAO,GAAG,uBAAWJ,cAAX,CAAhB;AACA,QAAMK,GAAG,GAAG,oBAAZ;AACA,QAAMC,OAAO,GAAG,2CAAe,CAAf,CAAhB;AAEA,wBAAU,MAAM;AACdF,IAAAA,OAAO,CAAEG,QAAT,CAAkB;AAAEF,MAAAA,GAAF;AAAOH,MAAAA,KAAP;AAAcC,MAAAA,IAAd;AAAoBG,MAAAA;AAApB,KAAlB;AACD,GAFD,EAEG,EAFH;AAIA,QAAME,OAAO,GAAG,wBAAY,MAAM;AAChCJ,IAAAA,OAAO,CAAEK,MAAT,CAAgBP,KAAhB;AACD,GAFe,EAEb,EAFa,CAAhB;AAIA,SAAO;AACLI,IAAAA,OADK;AAELD,IAAAA,GAFK;AAGLG,IAAAA;AAHK,GAAP;AAKD;;AAOM,SAASE,eAAT,CAAyB;AAC9BC,EAAAA,UAD8B;AAE9BC,EAAAA;AAF8B,CAAzB,EAGmB;AACxB,QAAMC,gBAAgB,GAAG,uBAAWhB,qBAAX,CAAzB;AACA,QAAM,CAACO,OAAD,IAAY,qBAChB,IAAIU,0BAAJ,CAAiBD,gBAAjB,EAAmCF,UAAnC,CADgB,CAAlB;AAIA,sBACE,6BAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEP;AAAhC,KACGQ,QADH,CADF;AAKD;;AAMM,SAASG,cAAT,CAAwB;AAAEH,EAAAA;AAAF,CAAxB,EAA4D;AACjE,QAAM,CAACI,aAAD,EAAgBH,gBAAhB,IAAoC,qBACxC,IADwC,CAA1C;AAIA,sBACE,6BAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEA;AAAvC,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEI,wBAAWC;AAAxB,KACGN,QADH,EAGGI,aAAa,iBAAI,6BAAC,iBAAD;AAAY,IAAA,OAAO,EAAEA;AAArB,IAHpB,CADF,CADF;AASD","sourcesContent":["import React, {\n  useContext,\n  useRef,\n  useEffect,\n  useCallback,\n  useState,\n} from 'react';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  GalleryState,\n  IShowFunction,\n  IGalleryItem,\n} from './GalleryState';\nimport { ImagePager } from './Pager';\n\nconst GalleryOverlayContext = React.createContext<IShowFunction | null>(\n  null,\n);\nconst GalleryContext = React.createContext<GalleryState | null>(null);\n\ntype IUseGalleryItem = {\n  index: number;\n  item: IGalleryItem;\n};\n\nexport function useGalleryItem({ index, item }: IUseGalleryItem) {\n  const gallery = useContext(GalleryContext);\n  const ref = useRef<Animated.Image>();\n  const opacity = useSharedValue(1);\n\n  useEffect(() => {\n    gallery!.addImage({ ref, index, item, opacity });\n  }, []);\n\n  const onPress = useCallback(() => {\n    gallery!.onShow(index);\n  }, []);\n\n  return {\n    opacity,\n    ref,\n    onPress,\n  };\n}\n\ntype IGalleryProviderProps = {\n  totalCount: number;\n  children: React.ReactNode;\n};\n\nexport function GalleryProvider({\n  totalCount,\n  children,\n}: IGalleryProviderProps) {\n  const setActiveGallery = useContext(GalleryOverlayContext)!;\n  const [gallery] = useState(\n    new GalleryState(setActiveGallery, totalCount),\n  );\n\n  return (\n    <GalleryContext.Provider value={gallery}>\n      {children}\n    </GalleryContext.Provider>\n  );\n}\n\ntype IGalleryOverlayProps = {\n  children: React.ReactNode;\n};\n\nexport function GalleryOverlay({ children }: IGalleryOverlayProps) {\n  const [activeGallery, setActiveGallery] = useState<unknown>(\n    null,\n  ) as [GalleryState, IShowFunction];\n\n  return (\n    <GalleryOverlayContext.Provider value={setActiveGallery}>\n      <View style={StyleSheet.absoluteFill}>\n        {children}\n\n        {activeGallery && <ImagePager gallery={activeGallery} />}\n      </View>\n    </GalleryOverlayContext.Provider>\n  );\n}\n"]}