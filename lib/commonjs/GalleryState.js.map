{"version":3,"sources":["GalleryState.ts"],"names":["GalleryState","constructor","fn","totalCount","_showFunction","images","currentIndex","_onChangeListeners","activeItem","addImage","item","index","setActiveIndex","_measure","_triggerListeners","addOnChangeListener","cb","push","filter","i","onShow","onClose","_clearListener","Promise","resolve","reject","ref","current","getNode","measure","x","y","width","height","pageX","pageY","targetWidth","targetHeight","measurements","forEach"],"mappings":";;;;;;;AAEA;;;;AA8BO,MAAMA,YAAN,CAAmB;AAWxBC,EAAAA,WAAW,CAACC,EAAD,EAAoBC,UAApB,EAAwC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACjD,SAAKC,aAAL,GAAqBF,EAArB;AACA,SAAKG,MAAL,GAAc,EAAd;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACA,SAAKJ,UAAL,GAAkBA,UAAlB;AACD;;AAED,MAAIK,UAAJ,GAAiB;AACf,QAAI,KAAKF,YAAL,KAAsB,IAA1B,EAAgC;AAC9B,aAAO,IAAP;AACD;;AAED,WAAO,KAAKD,MAAL,CAAY,KAAKC,YAAjB,CAAP;AACD;;AAEDG,EAAAA,QAAQ,CAACC,IAAD,EAAsB;AAC5B,QAAI,KAAKL,MAAL,CAAYK,IAAI,CAACC,KAAjB,CAAJ,EAA6B;AAC3B;AACD;;AAED,SAAKN,MAAL,CAAYK,IAAI,CAACC,KAAjB,IAA0BD,IAA1B;AACD;;AAED,QAAME,cAAN,CAAqBD,KAArB,EAAoC;AAClC,SAAKL,YAAL,GAAoBK,KAApB;AAEA,UAAM,KAAKE,QAAL,CAAc,KAAKL,UAAnB,CAAN;;AAEA,SAAKM,iBAAL,CAAuB,KAAKN,UAA5B;AACD;;AAEDO,EAAAA,mBAAmB,CAACC,EAAD,EAAwB;AACzC,SAAKT,kBAAL,CAAwBU,IAAxB,CAA6BD,EAA7B;;AAEA,WAAO,MAAM;AACX,WAAKT,kBAAL,CAAwBW,MAAxB,CAAgCC,CAAD,IAAOA,CAAC,KAAKH,EAA5C;AACD,KAFD;AAGD;;AAED,QAAMI,MAAN,CAAaT,KAAb,EAA4B;AAC1B,UAAM,KAAKC,cAAL,CAAoBD,KAApB,CAAN;;AAEA,SAAKP,aAAL,CAAmB,IAAnB;AACD;;AAEDiB,EAAAA,OAAO,GAAG;AACR,SAAKjB,aAAL,CAAmB,IAAnB;;AACA,SAAKkB,cAAL;;AACA,SAAKhB,YAAL,GAAoB,IAApB;AACD;;AAEDgB,EAAAA,cAAc,GAAG;AACf,SAAKf,kBAAL,GAA0B,EAA1B;AACD;;AAEDM,EAAAA,QAAQ,CAACH,IAAD,EAAsB;AAC5B,WAAO,IAAIa,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACjBf,IAAI,CAACgB,GAAL,CACGC,OADH,CACYC,OADZ,GAEGC,OAFH,CAEW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,KAAuC;AAC9C,UAAIH,KAAK,KAAK,CAAV,IAAeC,MAAM,KAAK,CAA9B,EAAiC;AAC/BR,QAAAA,MAAM;AACN;AACD;;AAED,YAAM;AAAEW,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAgC,gCACpC3B,IAAI,CAACA,IAD+B,CAAtC;AAIAA,MAAAA,IAAI,CAAC4B,YAAL,GAAoB;AAClBN,QAAAA,KADkB;AAElBC,QAAAA,MAFkB;AAGlBH,QAAAA,CAAC,EAAEI,KAHe;AAIlBH,QAAAA,CAAC,EAAEI,KAJe;AAKlBE,QAAAA,YALkB;AAMlBD,QAAAA;AANkB,OAApB;AASAZ,MAAAA,OAAO;AACR,KAtBH,CADK,CAAP;AAyBD;;AAEDV,EAAAA,iBAAiB,CAACJ,IAAD,EAAsB;AACrC,SAAKH,kBAAL,CAAwBgC,OAAxB,CAAiCvB,EAAD,IAAQA,EAAE,CAACN,IAAD,CAA1C;AACD;;AAjGuB","sourcesContent":["import React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { normalizeDimensions } from './utils';\n\n\n\nexport type IShowFunction = (value: GalleryState | null) => void;\nexport type IGalleryItem = {\n  width: number;\n  height: number;\n  uri: string;\n};\n\ntype IMeasurements = {\n  width: number;\n  height: number;\n  targetWidth: number;\n  targetHeight: number;\n  x: number;\n  y: number;\n};\n\nexport type IGalleryImage = {\n  ref: React.RefObject<Animated.Image>;\n  index: number;\n  opacity: Animated.SharedValue<number>;\n  item: IGalleryItem;\n  measurements?: IMeasurements;\n};\n\ntype IOnChangeCallback = (item: IGalleryImage) => void;\n\nexport class GalleryState {\n  private _showFunction: IShowFunction;\n\n  private currentIndex: number | null;\n\n  private _onChangeListeners: IOnChangeCallback[];\n\n  public images: IGalleryImage[];\n\n  public totalCount: number;\n\n  constructor(fn: IShowFunction, totalCount: number) {\n    this._showFunction = fn;\n    this.images = [];\n    this.currentIndex = null;\n    this._onChangeListeners = [];\n    this.totalCount = totalCount;\n  }\n\n  get activeItem() {\n    if (this.currentIndex === null) {\n      return null;\n    }\n\n    return this.images[this.currentIndex];\n  }\n\n  addImage(item: IGalleryImage) {\n    if (this.images[item.index]) {\n      return;\n    }\n\n    this.images[item.index] = item;\n  }\n\n  async setActiveIndex(index: number) {\n    this.currentIndex = index;\n\n    await this._measure(this.activeItem!);\n\n    this._triggerListeners(this.activeItem!);\n  }\n\n  addOnChangeListener(cb: IOnChangeCallback) {\n    this._onChangeListeners.push(cb);\n\n    return () => {\n      this._onChangeListeners.filter((i) => i === cb);\n    };\n  }\n\n  async onShow(index: number) {\n    await this.setActiveIndex(index);\n\n    this._showFunction(this);\n  }\n\n  onClose() {\n    this._showFunction(null);\n    this._clearListener();\n    this.currentIndex = null;\n  }\n\n  _clearListener() {\n    this._onChangeListeners = [];\n  }\n\n  _measure(item: IGalleryImage) {\n    return new Promise((resolve, reject) =>\n      item.ref\n        .current!.getNode()\n        .measure((x, y, width, height, pageX, pageY) => {\n          if (width === 0 && height === 0) {\n            reject();\n            return;\n          }\n\n          const { targetWidth, targetHeight } = normalizeDimensions(\n            item.item,\n          );\n\n          item.measurements = {\n            width,\n            height,\n            x: pageX,\n            y: pageY,\n            targetHeight,\n            targetWidth,\n          };\n\n          resolve();\n        }),\n    );\n  }\n\n  _triggerListeners(item: IGalleryImage) {\n    this._onChangeListeners.forEach((cb) => cb(item));\n  }\n}\n"]}