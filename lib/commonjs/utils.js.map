{"version":3,"sources":["utils.ts"],"names":["dimensions","Dimensions","get","normalizeDimensions","item","targetWidth","width","scaleFactor","targetHeight","height","friction","value","MAX_FRICTION","MAX_VALUE","res","Math","max","min","abs","fixGestureHandler","set","v","getShouldRender","index","activeIndex","diffValue","diff","clamp","lowerBound","upperBound"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAGA,MAAMA,UAAU,GAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAnB;;AAEO,SAASC,mBAAT,CACLC,IADK,EAELC,WAAW,GAAGL,UAAU,CAACM,KAFpB,EAGL;AACA,QAAMC,WAAW,GAAGH,IAAI,CAACE,KAAL,GAAaD,WAAjC;AACA,QAAMG,YAAY,GAAGJ,IAAI,CAACK,MAAL,GAAcF,WAAnC;AAEA,SAAO;AACLF,IAAAA,WADK;AAELG,IAAAA;AAFK,GAAP;AAID;;AAEM,SAASE,QAAT,CAAkBC,KAAlB,EAAiC;AACtC;;AAEA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,SAAS,GAAG,GAAlB;AAEA,QAAMC,GAAG,GAAGC,IAAI,CAACC,GAAL,CACV,CADU,EAEVD,IAAI,CAACE,GAAL,CACEL,YADF,EAEE,IAAKG,IAAI,CAACG,GAAL,CAASP,KAAT,KAAmBC,YAAY,GAAG,CAAlC,CAAD,GAAyCC,SAF/C,CAFU,CAAZ;;AAQA,MAAIF,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,CAACG,GAAR;AACD;;AAED,SAAOA,GAAP;AACD,C,CAED;AACA;AACA;;;AACO,SAASK,iBAAT,GAA6B;AAClC,QAAM,GAAGC,GAAH,IAAU,qBAAS,CAAT,CAAhB;AAEA,wBAAU,MAAM;AACdA,IAAAA,GAAG,CAAEC,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAH;AACD,GAFD,EAEG,EAFH;AAGD;;AAEM,SAASC,eAAT,CACLC,KADK,EAELC,WAFK,EAGLC,SAAS,GAAG,CAHP,EAIL;AACA,QAAMC,IAAI,GAAGX,IAAI,CAACG,GAAL,CAASK,KAAK,GAAGC,WAAjB,CAAb;;AAEA,MAAIE,IAAI,GAAGD,SAAX,EAAsB;AACpB,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAEM,SAASE,KAAT,CACLhB,KADK,EAELiB,UAFK,EAGLC,UAHK,EAIL;AACA;;AAEA,SAAOd,IAAI,CAACE,GAAL,CAASF,IAAI,CAACC,GAAL,CAASY,UAAT,EAAqBjB,KAArB,CAAT,EAAsCkB,UAAtC,CAAP;AACD","sourcesContent":["import { Dimensions } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport { IGalleryItem } from './GalleryState';\n\nconst dimensions = Dimensions.get('window');\n\nexport function normalizeDimensions(\n  item: IGalleryItem,\n  targetWidth = dimensions.width,\n) {\n  const scaleFactor = item.width / targetWidth;\n  const targetHeight = item.height / scaleFactor;\n\n  return {\n    targetWidth,\n    targetHeight,\n  };\n}\n\nexport function friction(value: number) {\n  'worklet';\n\n  const MAX_FRICTION = 30;\n  const MAX_VALUE = 200;\n\n  const res = Math.max(\n    1,\n    Math.min(\n      MAX_FRICTION,\n      1 + (Math.abs(value) * (MAX_FRICTION - 1)) / MAX_VALUE,\n    ),\n  );\n\n  if (value < 0) {\n    return -res;\n  }\n\n  return res;\n}\n\n// in order to simultaneousHandlers to work\n// we need to trigger rerender of the screen\n// so refs will be valid then\nexport function fixGestureHandler() {\n  const [, set] = useState(0);\n\n  useEffect(() => {\n    set((v) => v + 1);\n  }, []);\n}\n\nexport function getShouldRender(\n  index: number,\n  activeIndex: number,\n  diffValue = 3,\n) {\n  const diff = Math.abs(index - activeIndex);\n\n  if (diff > diffValue) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function clamp(\n  value: number,\n  lowerBound: number,\n  upperBound: number,\n) {\n  'worklet';\n\n  return Math.min(Math.max(lowerBound, value), upperBound);\n}\n"]}